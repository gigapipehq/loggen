// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package loki

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson3fd435f7DecodeGithubComGigapipehqLoggenInternalGeneratorsLoki(in *jlexer.Lexer, out *stream) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "stream":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				out.Stream = make(map[string]string)
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v1 string
					v1 = string(in.String())
					(out.Stream)[key] = v1
					in.WantComma()
				}
				in.Delim('}')
			}
		case "values":
			if in.IsNull() {
				in.Skip()
				out.Values = nil
			} else {
				in.Delim('[')
				if out.Values == nil {
					if !in.IsDelim(']') {
						out.Values = make([][]string, 0, 2)
					} else {
						out.Values = [][]string{}
					}
				} else {
					out.Values = (out.Values)[:0]
				}
				for !in.IsDelim(']') {
					var v2 []string
					if in.IsNull() {
						in.Skip()
						v2 = nil
					} else {
						in.Delim('[')
						if v2 == nil {
							if !in.IsDelim(']') {
								v2 = make([]string, 0, 4)
							} else {
								v2 = []string{}
							}
						} else {
							v2 = (v2)[:0]
						}
						for !in.IsDelim(']') {
							var v3 string
							v3 = string(in.String())
							v2 = append(v2, v3)
							in.WantComma()
						}
						in.Delim(']')
					}
					out.Values = append(out.Values, v2)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3fd435f7EncodeGithubComGigapipehqLoggenInternalGeneratorsLoki(out *jwriter.Writer, in stream) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"stream\":"
		out.RawString(prefix[1:])
		if in.Stream == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v4First := true
			for v4Name, v4Value := range in.Stream {
				if v4First {
					v4First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v4Name))
				out.RawByte(':')
				out.String(string(v4Value))
			}
			out.RawByte('}')
		}
	}
	{
		const prefix string = ",\"values\":"
		out.RawString(prefix)
		if in.Values == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v5, v6 := range in.Values {
				if v5 > 0 {
					out.RawByte(',')
				}
				if v6 == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
					out.RawString("null")
				} else {
					out.RawByte('[')
					for v7, v8 := range v6 {
						if v7 > 0 {
							out.RawByte(',')
						}
						out.String(string(v8))
					}
					out.RawByte(']')
				}
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v stream) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3fd435f7EncodeGithubComGigapipehqLoggenInternalGeneratorsLoki(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v stream) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3fd435f7EncodeGithubComGigapipehqLoggenInternalGeneratorsLoki(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *stream) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3fd435f7DecodeGithubComGigapipehqLoggenInternalGeneratorsLoki(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *stream) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3fd435f7DecodeGithubComGigapipehqLoggenInternalGeneratorsLoki(l, v)
}
func easyjson3fd435f7DecodeGithubComGigapipehqLoggenInternalGeneratorsLoki1(in *jlexer.Lexer, out *logLine) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		in.Skip()
	} else {
		in.Delim('{')
		*out = make(logLine)
		for !in.IsDelim('}') {
			key := string(in.String())
			in.WantColon()
			var v9 string
			v9 = string(in.String())
			(*out)[key] = v9
			in.WantComma()
		}
		in.Delim('}')
	}
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3fd435f7EncodeGithubComGigapipehqLoggenInternalGeneratorsLoki1(out *jwriter.Writer, in logLine) {
	if in == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
		out.RawString(`null`)
	} else {
		out.RawByte('{')
		v10First := true
		for v10Name, v10Value := range in {
			if v10First {
				v10First = false
			} else {
				out.RawByte(',')
			}
			out.String(string(v10Name))
			out.RawByte(':')
			out.String(string(v10Value))
		}
		out.RawByte('}')
	}
}

// MarshalJSON supports json.Marshaler interface
func (v logLine) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3fd435f7EncodeGithubComGigapipehqLoggenInternalGeneratorsLoki1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v logLine) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3fd435f7EncodeGithubComGigapipehqLoggenInternalGeneratorsLoki1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *logLine) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3fd435f7DecodeGithubComGigapipehqLoggenInternalGeneratorsLoki1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *logLine) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3fd435f7DecodeGithubComGigapipehqLoggenInternalGeneratorsLoki1(l, v)
}
func easyjson3fd435f7DecodeGithubComGigapipehqLoggenInternalGeneratorsLoki2(in *jlexer.Lexer, out *log) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "streams":
			if in.IsNull() {
				in.Skip()
				out.Streams = nil
			} else {
				in.Delim('[')
				if out.Streams == nil {
					if !in.IsDelim(']') {
						out.Streams = make([]stream, 0, 2)
					} else {
						out.Streams = []stream{}
					}
				} else {
					out.Streams = (out.Streams)[:0]
				}
				for !in.IsDelim(']') {
					var v11 stream
					(v11).UnmarshalEasyJSON(in)
					out.Streams = append(out.Streams, v11)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3fd435f7EncodeGithubComGigapipehqLoggenInternalGeneratorsLoki2(out *jwriter.Writer, in log) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"streams\":"
		out.RawString(prefix[1:])
		if in.Streams == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v12, v13 := range in.Streams {
				if v12 > 0 {
					out.RawByte(',')
				}
				(v13).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v log) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3fd435f7EncodeGithubComGigapipehqLoggenInternalGeneratorsLoki2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v log) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3fd435f7EncodeGithubComGigapipehqLoggenInternalGeneratorsLoki2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *log) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3fd435f7DecodeGithubComGigapipehqLoggenInternalGeneratorsLoki2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *log) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3fd435f7DecodeGithubComGigapipehqLoggenInternalGeneratorsLoki2(l, v)
}
