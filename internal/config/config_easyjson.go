// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package config

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
	attribute "go.opentelemetry.io/otel/attribute"
	trace "go.opentelemetry.io/otel/trace"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson6615c02eDecodeGithubComGigapipehqLoggenInternalConfig(in *jlexer.Lexer, out *TracesConfig) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "enabled":
			out.Enabled = bool(in.Bool())
		case "defaults":
			if in.IsNull() {
				in.Skip()
				out.Defaults = nil
			} else {
				in.Delim('[')
				if out.Defaults == nil {
					if !in.IsDelim(']') {
						out.Defaults = make([]attribute.Key, 0, 4)
					} else {
						out.Defaults = []attribute.Key{}
					}
				} else {
					out.Defaults = (out.Defaults)[:0]
				}
				for !in.IsDelim(']') {
					var v1 attribute.Key
					v1 = attribute.Key(in.String())
					out.Defaults = append(out.Defaults, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "custom":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Custom).UnmarshalJSON(data))
			}
		case "spans":
			if in.IsNull() {
				in.Skip()
				out.Spans = nil
			} else {
				in.Delim('[')
				if out.Spans == nil {
					if !in.IsDelim(']') {
						out.Spans = make([]SpanStep, 0, 0)
					} else {
						out.Spans = []SpanStep{}
					}
				} else {
					out.Spans = (out.Spans)[:0]
				}
				for !in.IsDelim(']') {
					var v2 SpanStep
					(v2).UnmarshalEasyJSON(in)
					out.Spans = append(out.Spans, v2)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6615c02eEncodeGithubComGigapipehqLoggenInternalConfig(out *jwriter.Writer, in TracesConfig) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"enabled\":"
		out.RawString(prefix[1:])
		out.Bool(bool(in.Enabled))
	}
	{
		const prefix string = ",\"defaults\":"
		out.RawString(prefix)
		if in.Defaults == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v3, v4 := range in.Defaults {
				if v3 > 0 {
					out.RawByte(',')
				}
				out.String(string(v4))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"custom\":"
		out.RawString(prefix)
		if in.Custom == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v5, v6 := range in.Custom {
				if v5 > 0 {
					out.RawByte(',')
				}
				easyjson6615c02eEncodeGoOpentelemetryIoOtelAttribute(out, v6)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"spans\":"
		out.RawString(prefix)
		if in.Spans == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v7, v8 := range in.Spans {
				if v7 > 0 {
					out.RawByte(',')
				}
				(v8).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v TracesConfig) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6615c02eEncodeGithubComGigapipehqLoggenInternalConfig(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v TracesConfig) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6615c02eEncodeGithubComGigapipehqLoggenInternalConfig(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *TracesConfig) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6615c02eDecodeGithubComGigapipehqLoggenInternalConfig(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *TracesConfig) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6615c02eDecodeGithubComGigapipehqLoggenInternalConfig(l, v)
}
func easyjson6615c02eDecodeGoOpentelemetryIoOtelAttribute(in *jlexer.Lexer, out *attribute.KeyValue) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Key":
			out.Key = attribute.Key(in.String())
		case "Value":
			easyjson6615c02eDecodeGoOpentelemetryIoOtelAttribute1(in, &out.Value)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6615c02eEncodeGoOpentelemetryIoOtelAttribute(out *jwriter.Writer, in attribute.KeyValue) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Key\":"
		out.RawString(prefix[1:])
		out.String(string(in.Key))
	}
	{
		const prefix string = ",\"Value\":"
		out.RawString(prefix)
		out.Raw((in.Value).MarshalJSON())
	}
	out.RawByte('}')
}
func easyjson6615c02eDecodeGoOpentelemetryIoOtelAttribute1(in *jlexer.Lexer, out *attribute.Value) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6615c02eEncodeGoOpentelemetryIoOtelAttribute1(out *jwriter.Writer, in attribute.Value) {
	out.RawByte('{')
	first := true
	_ = first
	out.RawByte('}')
}
func easyjson6615c02eDecodeGithubComGigapipehqLoggenInternalConfig1(in *jlexer.Lexer, out *SpanStep) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "kind":
			out.Kind = trace.SpanKind(in.Int())
		case "name":
			out.Name = string(in.String())
		case "duration":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Duration).UnmarshalJSON(data))
			}
		case "attributes":
			if in.IsNull() {
				in.Skip()
				out.Attributes = nil
			} else {
				in.Delim('[')
				if out.Attributes == nil {
					if !in.IsDelim(']') {
						out.Attributes = make([]SpanAttributeConfig, 0, 1)
					} else {
						out.Attributes = []SpanAttributeConfig{}
					}
				} else {
					out.Attributes = (out.Attributes)[:0]
				}
				for !in.IsDelim(']') {
					var v9 SpanAttributeConfig
					(v9).UnmarshalEasyJSON(in)
					out.Attributes = append(out.Attributes, v9)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "children":
			if in.IsNull() {
				in.Skip()
				out.Children = nil
			} else {
				in.Delim('[')
				if out.Children == nil {
					if !in.IsDelim(']') {
						out.Children = make([]SpanStep, 0, 0)
					} else {
						out.Children = []SpanStep{}
					}
				} else {
					out.Children = (out.Children)[:0]
				}
				for !in.IsDelim(']') {
					var v10 SpanStep
					(v10).UnmarshalEasyJSON(in)
					out.Children = append(out.Children, v10)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6615c02eEncodeGithubComGigapipehqLoggenInternalConfig1(out *jwriter.Writer, in SpanStep) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"kind\":"
		out.RawString(prefix[1:])
		out.Int(int(in.Kind))
	}
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"duration\":"
		out.RawString(prefix)
		out.Raw((in.Duration).MarshalJSON())
	}
	{
		const prefix string = ",\"attributes\":"
		out.RawString(prefix)
		if in.Attributes == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v11, v12 := range in.Attributes {
				if v11 > 0 {
					out.RawByte(',')
				}
				(v12).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"children\":"
		out.RawString(prefix)
		if in.Children == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v13, v14 := range in.Children {
				if v13 > 0 {
					out.RawByte(',')
				}
				(v14).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v SpanStep) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6615c02eEncodeGithubComGigapipehqLoggenInternalConfig1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SpanStep) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6615c02eEncodeGithubComGigapipehqLoggenInternalConfig1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *SpanStep) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6615c02eDecodeGithubComGigapipehqLoggenInternalConfig1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SpanStep) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6615c02eDecodeGithubComGigapipehqLoggenInternalConfig1(l, v)
}
func easyjson6615c02eDecodeGithubComGigapipehqLoggenInternalConfig2(in *jlexer.Lexer, out *SpanAttributeConfig) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "name":
			out.Name = string(in.String())
		case "value_type":
			out.ValueType = string(in.String())
		case "resolve_fake":
			out.ResolveFake = string(in.String())
		case "resolve_from_log_value":
			out.ResolveFromLogValue = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6615c02eEncodeGithubComGigapipehqLoggenInternalConfig2(out *jwriter.Writer, in SpanAttributeConfig) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix[1:])
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"value_type\":"
		out.RawString(prefix)
		out.String(string(in.ValueType))
	}
	{
		const prefix string = ",\"resolve_fake\":"
		out.RawString(prefix)
		out.String(string(in.ResolveFake))
	}
	{
		const prefix string = ",\"resolve_from_log_value\":"
		out.RawString(prefix)
		out.String(string(in.ResolveFromLogValue))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v SpanAttributeConfig) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6615c02eEncodeGithubComGigapipehqLoggenInternalConfig2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SpanAttributeConfig) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6615c02eEncodeGithubComGigapipehqLoggenInternalConfig2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *SpanAttributeConfig) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6615c02eDecodeGithubComGigapipehqLoggenInternalConfig2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SpanAttributeConfig) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6615c02eDecodeGithubComGigapipehqLoggenInternalConfig2(l, v)
}
func easyjson6615c02eDecodeGithubComGigapipehqLoggenInternalConfig3(in *jlexer.Lexer, out *LogConfig) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "format":
			out.Format = string(in.String())
		case "structure":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				out.Structure = make(map[string]string)
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v15 string
					v15 = string(in.String())
					(out.Structure)[key] = v15
					in.WantComma()
				}
				in.Delim('}')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6615c02eEncodeGithubComGigapipehqLoggenInternalConfig3(out *jwriter.Writer, in LogConfig) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"format\":"
		out.RawString(prefix[1:])
		out.String(string(in.Format))
	}
	{
		const prefix string = ",\"structure\":"
		out.RawString(prefix)
		if in.Structure == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v16First := true
			for v16Name, v16Value := range in.Structure {
				if v16First {
					v16First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v16Name))
				out.RawByte(':')
				out.String(string(v16Value))
			}
			out.RawByte('}')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v LogConfig) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6615c02eEncodeGithubComGigapipehqLoggenInternalConfig3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v LogConfig) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6615c02eEncodeGithubComGigapipehqLoggenInternalConfig3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *LogConfig) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6615c02eDecodeGithubComGigapipehqLoggenInternalConfig3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *LogConfig) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6615c02eDecodeGithubComGigapipehqLoggenInternalConfig3(l, v)
}
func easyjson6615c02eDecodeGithubComGigapipehqLoggenInternalConfig4(in *jlexer.Lexer, out *Config) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "url":
			out.URL = string(in.String())
		case "headers":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				out.Headers = make(map[string]string)
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v17 string
					v17 = string(in.String())
					(out.Headers)[key] = v17
					in.WantComma()
				}
				in.Delim('}')
			}
		case "api_key":
			out.APIKey = string(in.String())
		case "api_secret":
			out.APISecret = string(in.String())
		case "labels":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				out.Labels = make(map[string]string)
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v18 string
					v18 = string(in.String())
					(out.Labels)[key] = v18
					in.WantComma()
				}
				in.Delim('}')
			}
		case "rate":
			out.Rate = int(in.Int())
		case "timeout":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Timeout).UnmarshalJSON(data))
			}
		case "log_config":
			(out.LogConfig).UnmarshalEasyJSON(in)
		case "enable_metrics":
			out.EnableMetrics = bool(in.Bool())
		case "traces":
			(out.Traces).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6615c02eEncodeGithubComGigapipehqLoggenInternalConfig4(out *jwriter.Writer, in Config) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"url\":"
		out.RawString(prefix[1:])
		out.String(string(in.URL))
	}
	{
		const prefix string = ",\"headers\":"
		out.RawString(prefix)
		if in.Headers == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v19First := true
			for v19Name, v19Value := range in.Headers {
				if v19First {
					v19First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v19Name))
				out.RawByte(':')
				out.String(string(v19Value))
			}
			out.RawByte('}')
		}
	}
	{
		const prefix string = ",\"api_key\":"
		out.RawString(prefix)
		out.String(string(in.APIKey))
	}
	{
		const prefix string = ",\"api_secret\":"
		out.RawString(prefix)
		out.String(string(in.APISecret))
	}
	{
		const prefix string = ",\"labels\":"
		out.RawString(prefix)
		if in.Labels == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v20First := true
			for v20Name, v20Value := range in.Labels {
				if v20First {
					v20First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v20Name))
				out.RawByte(':')
				out.String(string(v20Value))
			}
			out.RawByte('}')
		}
	}
	{
		const prefix string = ",\"rate\":"
		out.RawString(prefix)
		out.Int(int(in.Rate))
	}
	{
		const prefix string = ",\"timeout\":"
		out.RawString(prefix)
		out.Raw((in.Timeout).MarshalJSON())
	}
	{
		const prefix string = ",\"log_config\":"
		out.RawString(prefix)
		(in.LogConfig).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"enable_metrics\":"
		out.RawString(prefix)
		out.Bool(bool(in.EnableMetrics))
	}
	{
		const prefix string = ",\"traces\":"
		out.RawString(prefix)
		(in.Traces).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Config) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6615c02eEncodeGithubComGigapipehqLoggenInternalConfig4(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Config) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6615c02eEncodeGithubComGigapipehqLoggenInternalConfig4(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Config) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6615c02eDecodeGithubComGigapipehqLoggenInternalConfig4(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Config) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6615c02eDecodeGithubComGigapipehqLoggenInternalConfig4(l, v)
}
